#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Mini App
–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –≤–∞—à–µ–º –ü–ö
"""

import http.server
import socketserver
import webbrowser
import os
import socket
from urllib.parse import urlparse
import threading
import time
import json
import sys
from flask import Flask, jsonify, request
import sqlite3

app = Flask(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_data(telegram_id):
    conn = sqlite3.connect('../commands.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT telegram_id, username, first_name, last_name, vip_status, search_count, favorites_count 
    FROM users WHERE telegram_id = ?
    ''', (telegram_id,))
    
    user = cursor.fetchone()
    conn.close()
    
    if user:
        columns = ['telegram_id', 'username', 'first_name', 'last_name', 'vip_status', 'search_count', 'favorites_count']
        return dict(zip(columns, user))
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_data(telegram_id, data):
    conn = sqlite3.connect('../commands.db')
    cursor = conn.cursor()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    allowed_fields = ['search_count', 'favorites_count']
    
    update_fields = []
    values = []
    
    for field, value in data.items():
        if field in allowed_fields:
            update_fields.append(f"{field} = ?")
            values.append(value)
    
    if update_fields:
        values.append(telegram_id)
        query = f"UPDATE users SET {', '.join(update_fields)} WHERE telegram_id = ?"
        cursor.execute(query, values)
        conn.commit()
    
    conn.close()

@app.route('/api/user/<int:telegram_id>')
def get_user(telegram_id):
    user_data = get_user_data(telegram_id)
    if user_data:
        return jsonify(user_data)
    else:
        return jsonify({'error': 'User not found'}), 404

@app.route('/api/user/<int:telegram_id>', methods=['POST'])
def update_user(telegram_id):
    data = request.get_json()
    update_user_data(telegram_id, data)
    return jsonify({'success': True})

@app.route('/api/commands')
def get_commands():
    try:
        with open('commands.json', 'r', encoding='utf-8') as f:
            commands = json.load(f)
        return jsonify(commands)
    except FileNotFoundError:
        return jsonify({'error': 'Commands file not found'}), 404

@app.route('/api/gps')
def get_gps():
    try:
        with open('gps.json', 'r', encoding='utf-8') as f:
            gps_data = json.load(f)
        return jsonify(gps_data)
    except FileNotFoundError:
        return jsonify({'error': 'GPS file not found'}), 404

@app.route('/api/rp-terms')
def get_rp_terms():
    try:
        with open('rp_terms.json', 'r', encoding='utf-8') as f:
            rp_terms = json.load(f)
        return jsonify(rp_terms)
    except FileNotFoundError:
        return jsonify({'error': 'RP terms file not found'}), 404

@app.route('/api/helper-duties')
def get_helper_duties():
    try:
        with open('helper_duties.json', 'r', encoding='utf-8') as f:
            duties = json.load(f)
        return jsonify(duties)
    except FileNotFoundError:
        return jsonify({'error': 'Helper duties file not found'}), 404

@app.route('/api/chat-rules')
def get_chat_rules():
    try:
        with open('support_chat_rules.json', 'r', encoding='utf-8') as f:
            rules = json.load(f)
        return jsonify(rules)
    except FileNotFoundError:
        return jsonify({'error': 'Chat rules file not found'}), 404

@app.route('/api/mute-rules')
def get_mute_rules():
    try:
        with open('hmute_rules.json', 'r', encoding='utf-8') as f:
            rules = json.load(f)
        return jsonify(rules)
    except FileNotFoundError:
        return jsonify({'error': 'Mute rules file not found'}), 404

class MiniAppServer:
    def __init__(self, port=8000):
        self.port = port
        self.server = None
        self.is_running = False
        
    def get_local_ip(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(("8.8.8.8", 80))
            local_ip = s.getsockname()[0]
            s.close()
            return local_ip
        except:
            return "127.0.0.1"
    
    def load_json_file(self, filename):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å JSON —Ñ–∞–π–ª"""
        try:
            # –ò—â–µ–º —Ñ–∞–π–ª –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ mini_app)
            parent_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
            file_path = os.path.join(parent_dir, filename)
            
            if os.path.exists(file_path):
                with open(file_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            else:
                print(f"‚ö†Ô∏è  –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {parent_dir}")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                current_dir = os.path.dirname(os.path.abspath(__file__))
                file_path = os.path.join(current_dir, filename)
                if os.path.exists(file_path):
                    with open(file_path, 'r', encoding='utf-8') as f:
                        return json.load(f)
                else:
                    print(f"‚ö†Ô∏è  –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –≤ {current_dir}")
                    return {}
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
            return {}
    
    def start_server(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä"""
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É —Å Mini App
            os.chdir(os.path.dirname(os.path.abspath(__file__)))
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π HTTP —Å–µ—Ä–≤–µ—Ä
            class CustomHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
                def do_GET(self):
                    # API endpoints
                    if self.path.startswith('/api/'):
                        self.send_response(200)
                        self.send_header('Content-type', 'application/json')
                        self.send_header('Access-Control-Allow-Origin', '*')
                        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
                        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
                        self.end_headers()
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —Ñ–∞–π–ª –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è
                        endpoint = self.path[5:]  # –£–±–∏—Ä–∞–µ–º '/api/'
                        
                        if endpoint == 'commands':
                            data = self.server.mini_app.load_json_file('commands.json')
                        elif endpoint == 'gps':
                            data = self.server.mini_app.load_json_file('gps.json')
                        elif endpoint == 'rp-terms':
                            data = self.server.mini_app.load_json_file('rp_terms.json')
                        elif endpoint == 'helper-duties':
                            data = self.server.mini_app.load_json_file('helper_duties.json')
                        elif endpoint == 'chat-rules':
                            data = self.server.mini_app.load_json_file('support_chat_rules.json')
                        elif endpoint == 'mute-rules':
                            data = self.server.mini_app.load_json_file('hmute_rules.json')
                        else:
                            data = {"error": "Unknown endpoint"}
                        
                        self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))
                        return
                    
                    # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                    return http.server.SimpleHTTPRequestHandler.do_GET(self)
                
                def do_OPTIONS(self):
                    self.send_response(200)
                    self.send_header('Access-Control-Allow-Origin', '*')
                    self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
                    self.send_header('Access-Control-Allow-Headers', 'Content-Type')
                    self.end_headers()
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
            with socketserver.TCPServer(("", self.port), CustomHTTPRequestHandler) as httpd:
                httpd.mini_app = self  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å
                self.server = httpd
                self.is_running = True
                
                local_ip = self.get_local_ip()
                local_url = f"http://{local_ip}:{self.port}"
                
                print("üöÄ Mini App —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
                print(f"üì± –õ–æ–∫–∞–ª—å–Ω—ã–π URL: {local_url}")
                print(f"üåê –í–Ω–µ—à–Ω–∏–π URL: http://localhost:{self.port}")
                print("\nüìã –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ BotFather:")
                print(f"1. –û—Ç–∫—Ä–æ–π—Ç–µ @BotFather")
                print(f"2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /setmenubutton")
                print(f"3. –í–≤–µ–¥–∏—Ç–µ URL: {local_url}")
                print(f"4. –ù–∞–∂–º–∏—Ç–µ Save")
                print("\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –≠—Ç–æ—Ç URL —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤–∞—à –ü–ö –≤–∫–ª—é—á–µ–Ω!")
                print("üí° –î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ GitHub Pages –∏–ª–∏ Netlify")
                print("\nüîó API Endpoints:")
                print(f"   {local_url}/api/commands")
                print(f"   {local_url}/api/gps")
                print(f"   {local_url}/api/rp-terms")
                print(f"   {local_url}/api/helper-duties")
                print(f"   {local_url}/api/chat-rules")
                print(f"   {local_url}/api/mute-rules")
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
                webbrowser.open(local_url)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
                httpd.serve_forever()
                
        except OSError as e:
            if e.errno == 48:  # Address already in use
                print(f"‚ùå –ü–æ—Ä—Ç {self.port} –∑–∞–Ω—è—Ç!")
                print(f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç: python server.py 8001")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        except KeyboardInterrupt:
            print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            self.stop_server()
    
    def stop_server(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"""
        if self.server and self.is_running:
            self.server.shutdown()
            self.is_running = False
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    import sys
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    port = 8000
    if len(sys.argv) > 1:
        try:
            port = int(sys.argv[1])
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç!")
            return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    server = MiniAppServer(port)
    
    try:
        server.start_server()
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        server.stop_server()

if __name__ == "__main__":
    main() 