// üîí –¢–ï–ú–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –í–•–û–î–ê

class LoginSystem {
    constructor() {
        this.password = '407264'; // –ü–∞—Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.currentInput = '';
        this.currentIndex = 0;
        this.maxLength = 6;
        this.isAuthenticated = false;
        
        this.init();
    }

    init() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        if (this.checkAuth()) {
            this.authenticate();
            return;
        }

        this.bindEvents();
        this.updateDisplay();
        this.focusCurrentField();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        setTimeout(() => {
            this.showLoginScreen();
        }, 100);
    }

    checkAuth() {
        const isAuthenticated = localStorage.getItem('isAuthenticated');
        const authTimestamp = localStorage.getItem('authTimestamp');
        
        if (isAuthenticated && authTimestamp) {
            const now = Date.now();
            const authTime = parseInt(authTimestamp);
            const hoursSinceAuth = (now - authTime) / (1000 * 60 * 60);
            
            // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 24 —á–∞—Å–∞
            if (hoursSinceAuth < 24) {
                return true;
            } else {
                // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                localStorage.removeItem('isAuthenticated');
                localStorage.removeItem('authTimestamp');
            }
        }
        
        return false;
    }

    showLoginScreen() {
        const overlay = document.getElementById('loginOverlay');
        const mainContent = document.querySelector('.main-content');
        
        if (overlay) {
            overlay.style.display = 'flex';
        }
        
        if (mainContent) {
            mainContent.classList.add('blurred');
        }
    }

    hideLoginScreen() {
        const overlay = document.getElementById('loginOverlay');
        const mainContent = document.querySelector('.main-content');
        
        if (overlay) {
            overlay.style.display = 'none';
        }
        
        if (mainContent) {
            mainContent.classList.remove('blurred');
        }
    }

    bindEvents() {
        // –¶–∏—Ñ—Ä–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
        document.querySelectorAll('.login-key[data-digit]').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const digit = e.target.dataset.digit;
                this.addDigit(digit);
            });
        });

        // –ö–Ω–æ–ø–∫–∞ Backspace
        const backspaceBtn = document.getElementById('backspaceBtn');
        if (backspaceBtn) {
            backspaceBtn.addEventListener('click', () => {
                this.removeDigit();
            });
        }

        // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∏—Ç—å
        const clearBtn = document.getElementById('clearBtn');
        if (clearBtn) {
            clearBtn.addEventListener('click', () => {
                this.clearAll();
            });
        }

        // –ö–Ω–æ–ø–∫–∞ –≤–æ–π—Ç–∏
        const enterBtn = document.getElementById('enterBtn');
        if (enterBtn) {
            enterBtn.addEventListener('click', () => {
                this.checkPassword();
            });
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        document.addEventListener('keydown', (e) => {
            this.handleKeydown(e);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞
        document.addEventListener('paste', (e) => {
            this.handlePaste(e);
        });
    }

    addDigit(digit) {
        if (this.currentInput.length < this.maxLength) {
            this.currentInput += digit;
            this.currentIndex = this.currentInput.length;
            this.updateDisplay();
            this.focusCurrentField();
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é
            if (this.currentInput.length < this.maxLength) {
                setTimeout(() => {
                    this.focusCurrentField();
                }, 100);
            }
        }
    }

    removeDigit() {
        if (this.currentInput.length > 0) {
            this.currentInput = this.currentInput.slice(0, -1);
            this.currentIndex = this.currentInput.length;
            this.updateDisplay();
            this.focusCurrentField();
        }
    }

    clearAll() {
        this.currentInput = '';
        this.currentIndex = 0;
        this.updateDisplay();
        this.focusCurrentField();
        this.clearError();
    }

    checkPassword() {
        if (this.currentInput === this.password) {
            this.showSuccess();
        } else {
            this.showError();
        }
    }

    showSuccess() {
        // –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞
        document.querySelectorAll('.login-field').forEach(field => {
            field.classList.add('filled');
        });

        setTimeout(() => {
            this.authenticate();
        }, 800);
    }

    showError() {
        // –ê–Ω–∏–º–∞—Ü–∏—è –æ—à–∏–±–∫–∏
        document.querySelectorAll('.login-field').forEach(field => {
            field.classList.add('error');
        });

        setTimeout(() => {
            this.clearError();
        }, 2000);
    }

    clearError() {
        document.querySelectorAll('.login-field').forEach(field => {
            field.classList.remove('error');
        });
    }

    authenticate() {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        localStorage.setItem('isAuthenticated', 'true');
        localStorage.setItem('authTimestamp', Date.now().toString());

        this.isAuthenticated = true;
        
        // –°–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
        this.hideLoginScreen();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        this.initMainApp();
    }

    logout() {
        localStorage.removeItem('isAuthenticated');
        localStorage.removeItem('authTimestamp');
        this.isAuthenticated = false;
        location.reload();
    }

    initMainApp() {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Web App
        if (window.Telegram && window.Telegram.WebApp) {
            window.Telegram.WebApp.ready();
            window.Telegram.WebApp.expand();
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if (typeof initApp === 'function') {
            initApp();
        }
    }

    updateDisplay() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
        const fields = document.querySelectorAll('.login-field');
        fields.forEach((field, index) => {
            const digit = this.currentInput[index] || '';
            field.textContent = digit;
            
            if (digit) {
                field.classList.add('filled');
            } else {
                field.classList.remove('filled');
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ—á–∫–∏
        const dots = document.querySelectorAll('.login-dot');
        dots.forEach((dot, index) => {
            if (index < this.currentInput.length) {
                dot.classList.add('filled');
            } else {
                dot.classList.remove('filled');
            }
        });
    }

    focusCurrentField() {
        // –£–±–∏—Ä–∞–µ–º —Ñ–æ–∫—É—Å —Å–æ –≤—Å–µ—Ö –ø–æ–ª–µ–π
        document.querySelectorAll('.login-field').forEach(field => {
            field.classList.remove('focus');
        });

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–µ
        if (this.currentIndex < this.maxLength) {
            const currentField = document.querySelector(`[data-index="${this.currentIndex}"]`);
            if (currentField) {
                currentField.classList.add('focus');
            }
        }
    }

    handleKeydown(e) {
        switch (e.key) {
            case 'Enter':
                e.preventDefault();
                this.checkPassword();
                break;
            case 'Escape':
                e.preventDefault();
                this.clearAll();
                break;
            case 'Backspace':
                e.preventDefault();
                this.removeDigit();
                break;
            case 'ArrowLeft':
                e.preventDefault();
                if (this.currentIndex > 0) {
                    this.currentIndex--;
                    this.focusCurrentField();
                }
                break;
            case 'ArrowRight':
                e.preventDefault();
                if (this.currentIndex < this.maxLength) {
                    this.currentIndex++;
                    this.focusCurrentField();
                }
                break;
            default:
                if (/^[0-9]$/.test(e.key)) {
                    e.preventDefault();
                    this.addDigit(e.key);
                }
                break;
        }
    }

    handlePaste(e) {
        e.preventDefault();
        const pastedData = (e.clipboardData || window.clipboardData).getData('text');
        const numbers = pastedData.replace(/\D/g, '').slice(0, this.maxLength);
        
        if (numbers.length === this.maxLength) {
            this.currentInput = numbers;
            this.currentIndex = this.maxLength;
            this.updateDisplay();
            this.focusCurrentField();
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞
function logout() {
    if (window.loginSystem) {
        window.loginSystem.logout();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    window.loginSystem = new LoginSystem();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.LoginSystem = LoginSystem; 